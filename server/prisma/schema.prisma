// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ProductStatus {
  Draft
  Pending
  Published
}

enum Role {
  Admin
  Shopowner
  User
}

enum AuthProvider {
  Local
  Google
  Facebook
}

model Exchange {
  id   String    @id @default(auto()) @map("_id") @db.ObjectId
  from PriceUnit
  to   PriceUnit
  rate Float
  date DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  label       String   @unique
  points      Int
  dolla       Int
  product     Product? @relation(fields: [productId], references: [id])
  productId   String?  @db.ObjectId
  expiredDate DateTime
  isUsed      Boolean  @default(false)
  image       String?
  reward      Reward?  @relation(fields: [rewardId], references: [id])
  rewardId    String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reward {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  user    User?
  points  Int
  coupons Coupon[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String
  reward           Reward           @relation(fields: [rewardId], references: [id])
  rewardId         String           @unique @db.ObjectId
  username         String           @unique
  password         String
  role             Role             @default(User)
  image            String?
  coverImage       String?
  verified         Boolean          @default(false)
  verificationCode String?
  provider         AuthProvider     @default(Local)
  favorites        Favorites[]
  createdProducts  Product[]        @relation("CreatedBy")
  reviews          Review[]
  accessLogs       AccessLog[]
  addresses        UserAddress[]
  orders           Order[]
  potentialOrders  PotentialOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email])
}

model UserAddress {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  isDefault      Boolean
  username       String
  phone          String
  email          String?
  region         Region       @relation(fields: [regionId], references: [id])
  regionId       String       @db.ObjectId
  township       TownshipFees @relation(fields: [townshipFeesId], references: [id])
  townshipFeesId String       @db.ObjectId
  fullAddress    String
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
  billingOrders  Order[]      @relation("billingAddress")
  deliveryOrders Order[]      @relation("deliveryAddress")

  billingPotentialOrders PotentialOrder[] @relation("billingAddress")
  deveryPotentialOrders  PotentialOrder[] @relation("deliveryAddress")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PickupAddress {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  username        String
  phone           String
  email           String?
  date            DateTime
  orders          Order[]
  potentialOrders PotentialOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorites {
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  userId    String  @db.ObjectId
  productId String  @db.ObjectId

  // @@id([userId, productId])
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  name      String            @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  products  ProductCategory[]
}

model SalesCategory {
  id          String                 @id @default(auto()) @map("_id") @db.ObjectId
  name        String                 @unique
  startDate   DateTime
  image       String?
  endDate     DateTime
  isActive    Boolean                @default(true)
  description String?
  products    ProductSalesCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductSalesCategory {
  product         Product       @relation(fields: [productId], references: [id])
  salesCategory   SalesCategory @relation(fields: [salesCategoryId], references: [id])
  productId       String        @db.ObjectId
  salesCategoryId String        @db.ObjectId
  discount        Float

  // @@id([salesCategoryId, productId])
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model ProductCategory {
  product    Product  @relation(fields: [productId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  productId  String   @db.ObjectId
  categoryId String   @db.ObjectId

  // @@id([categoryId, productId])
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

enum ProductStockStatus {
  Available
  OutOfStock
  AskForStock
  Discontinued
}

enum PriceUnit {
  MMK
  USD
  SGD
  THB
  KRW
}

model Product {
  id            String                  @id @default(auto()) @map("_id") @db.ObjectId
  brand         Brand                   @relation(fields: [brandId], references: [id])
  brandId       String                  @db.ObjectId
  title         String
  price         Float
  images        String[]
  specification Specification[]
  instockStatus ProductStockStatus      @default(AskForStock)
  dealerPrice   Int
  marketPrice   Int
  status        ProductStatus           @default(Draft)
  priceUnit     PriceUnit               @default(MMK)
  likedUsers    Favorites[]
  quantity      Int
  reviews       Review[]
  creator       User?                   @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId     String?                 @db.ObjectId
  itemCode      String?
  categories    ProductCategory[]
  salesCategory ProductSalesCategory[]
  coupons       Coupon[]
  orderItem     OrderItem[]
  availableSets ProductRecommendation[]
  discount      Float                   @default(0.0)

  overview    String?
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductSet {
  id          String                  @id @default(auto()) @map("_id") @db.ObjectId
  images      String[]
  totalPrice  Float
  description String
  products    ProductRecommendation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductRecommendation {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  product      Product    @relation(fields: [productId], references: [id])
  productId    String     @db.ObjectId
  productSet   ProductSet @relation(fields: [productSetId], references: [id])
  productSetId String     @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Specification {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  Pending
  Processing
  Shipped
  Delivered
  Cancelled
}

enum PotentialOrderStatus {
  Processing
  Confimed
  Cancelled
}

model AccessLog {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @db.ObjectId
  browser  String
  ip       String
  platform String
  date     DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentMethodProvider {
  Cash
  AYAPay
  CBPay
  KBZPay
  OnePay
  UABPay
  WavePay
  BankTransfer
}

// Admin team only
model PotentialOrder {
  id         String               @id @default(auto()) @map("_id") @db.ObjectId
  user       User?                @relation(fields: [userId], references: [id])
  userId     String?              @db.ObjectId
  orderItems OrderItem[]
  status     PotentialOrderStatus @default(Processing)

  deliveryAddress       UserAddress?          @relation("deliveryAddress", fields: [deliveryAddressId], references: [id])
  deliveryAddressId     String?               @db.ObjectId
  pickupAddress         PickupAddress?        @relation(fields: [pickupAddressId], references: [id])
  pickupAddressId       String?               @db.ObjectId
  billingAddress        UserAddress           @relation("billingAddress", fields: [billingAddressId], references: [id])
  billingAddressId      String                @db.ObjectId
  paymentMethodProvider PaymentMethodProvider
  remark                String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  user       User?       @relation(fields: [userId], references: [id])
  userId     String?     @db.ObjectId
  orderItems OrderItem[]
  status     OrderStatus @default(Pending)

  deliveryAddress       UserAddress?          @relation("deliveryAddress", fields: [deliveryAddressId], references: [id])
  deliveryAddressId     String?               @db.ObjectId
  pickupAddress         PickupAddress?        @relation(fields: [pickupAddressId], references: [id])
  pickupAddressId       String?               @db.ObjectId
  billingAddress        UserAddress           @relation("billingAddress", fields: [billingAddressId], references: [id])
  billingAddressId      String                @db.ObjectId
  paymentMethodProvider PaymentMethodProvider
  remark                String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  price            Float
  totalPrice       Float
  quantity         Int
  product          Product         @relation(fields: [productId], references: [id])
  productId        String          @db.ObjectId
  order            Order?          @relation(fields: [orderId], references: [id])
  orderId          String?         @db.ObjectId
  potentialOrder   PotentialOrder? @relation(fields: [potentialOrderId], references: [id])
  potentialOrderId String?         @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TownshipFees {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String        @unique
  fees          Float
  region        Region?       @relation(fields: [regionId], references: [id])
  regionId      String?       @db.ObjectId
  userAddresses UserAddress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Region {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String         @unique
  townships     TownshipFees[]
  userAddresses UserAddress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
