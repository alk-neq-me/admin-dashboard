// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Status {
  Draft
  Pending
  Published
}

enum Role {
  Admin
  Shopowner
  User
}

enum AuthProvider {
  Local
  Google
  Facebook
}

model Exchange {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  from      PriceUnit
  to        PriceUnit
  rate      Float
  date      DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Coupon {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  points      Int
  dolla       Int
  product     Product? @relation(fields: [productId], references: [id])
  productId   String   @db.ObjectId
  expiredDate DateTime
  isUsed      Boolean  @default(false)
  image       String
  reward      Reward?  @relation(fields: [rewardId], references: [id])
  rewardId    String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reward {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  user    User?
  points  Int
  coupons Coupon[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String
  reward           Reward       @relation(fields: [rewardId], references: [id])
  rewardId         String       @unique @db.ObjectId
  username         String       @unique
  password         String
  role             Role         @default(User)
  image            String?
  coverImage       String?
  verified         Boolean      @default(false)
  verificationCode String?
  provider         AuthProvider @default(Local)
  favorites        Favorites[]
  createdProducts  Product[]    @relation("CreatedBy")
  orders           Order[]
  reviews          Review[]
  accessLogs       AccessLog[]
  addresses        Address[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email])
}

model Address {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  isDefault   Boolean
  name        String
  phone       String
  state       String
  township    String
  fullAddress String
  user        User    @relation(fields: [userId], references: [id])
  userId      String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorites {
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  userId    String  @db.ObjectId
  productId String  @db.ObjectId

  // @@id([userId, productId])
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  name      String            @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  products  ProductCategory[]
}

model SalesCategory {
  id        String                 @id @default(auto()) @map("_id") @db.ObjectId
  name      String                 @unique
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  products  ProductSalesCategory[]
}

model ProductSalesCategory {
  product         Product       @relation(fields: [productId], references: [id])
  salesCategory   SalesCategory @relation(fields: [salesCategoryId], references: [id])
  productId       String        @db.ObjectId
  salesCategoryId String        @db.ObjectId

  // @@id([salesCategoryId, productId])
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model ProductCategory {
  product    Product  @relation(fields: [productId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  productId  String   @db.ObjectId
  categoryId String   @db.ObjectId

  // @@id([categoryId, productId])
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

enum InstockStatus {
  InStock
  OutOfStock
  AskForStock
}

enum PriceUnit {
  MMK
  USD
  SGD
  THB
  KRW
}

model Product {
  id                     String                  @id @default(auto()) @map("_id") @db.ObjectId
  brand                  Brand                   @relation(fields: [brandId], references: [id])
  brandId                String                  @db.ObjectId
  title                  String
  price                  Int
  images                 String[]
  overview               String
  specification          Specification[]
  features               String
  warranty               Int // By years
  categories             ProductCategory[]
  colors                 String[]
  instockStatus          InstockStatus           @default(AskForStock)
  description            String
  dealerPrice            Int
  marketPrice            Int
  discount               Int
  status                 Status                  @default(Draft)
  priceUnit              PriceUnit               @default(MMK)
  likedUsers             Favorites[]
  quantity               Int
  reviews                Review[]
  orders                 Order[]
  creator                User?                   @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId              String?                 @db.ObjectId
  itemCode               String?
  salesCategory          ProductSalesCategory[]
  productRecommendations ProductRecommendation[]
  coupons                Coupon[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductRecommendation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  images      String[]
  totalPrice  Int
  description String
  product     Product? @relation(fields: [productId], references: [id])
  productId   String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Specification {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderState {
  Pending
  Processing
  Shipped
  Delivered
  Cancelled
}

model Order {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @db.ObjectId
  product   Product    @relation(fields: [productId], references: [id])
  productId String     @db.ObjectId
  state     OrderState @default(Pending)
  quantity  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccessLog {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @db.ObjectId
  browser  String
  ip       String
  platform String
  date     DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
